from langchain.schema import HumanMessage, SystemMessage
from langchain_gigachat import GigaChat
from dotenv import load_dotenv
import os
from pathlib import Path

# Явно указываем путь к .env файлу, который лежит в той же директории,
# что и этот скрипт (backend/). Это самый надежный способ.
env_path = Path(__file__).parent / '.env'
load_dotenv(dotenv_path=env_path)

# Получаем креды из переменных окружения
# Убедитесь, что у вас есть файл .env с этой переменной
GIGACHAT_CREDENTIALS = os.getenv("GIGACHAT_CREDENTIALS")

# Глобальная переменная для хранения объекта чата.
# Будет инициализирована при первом запросе.
chat = None

# Промпт для случая, когда найдено несколько релевантных фрагментов из разных областей
MULTIPLE_CONTEXT_PROMPT_TEMPLATE = """
Ты — вежливый и полезный ассистент службы поддержки компании "Газстройпром".
Твоя задача — помочь пользователю, проанализировав несколько фрагментов из базы знаний. Они могут относиться к разным темам.

Проанализируй каждый из следующих фрагментов.
Если фрагменты относятся к разным, не связанным между собой темам, не пытайся их объединить в один ответ. Вместо этого, кратко и четко опиши решение, предлагаемое в каждом фрагменте, и предоставь пользователю выбор. Например: "Я нашел несколько возможных вариантов ответа, выберите наиболее подходящий для вас: 1. [Описание варианта 1]. 2. [Описание варианта 2]. 3. [Описание варианта 3]."
Если же фрагменты дополняют друг друга и относятся к одной теме, синтезируй из них единый, полный ответ.

Фрагменты из базы знаний:
---
{context}
---

Вопрос пользователя: {user_prompt}

Твой ответ:
"""


# Промпт для случая, когда релеватный контекст не найден и нужно предоставить контакты
CONTACT_SUPPORT_PROMPT_TEMPLATE = """
Ты — вежливый и полезный ассистент службы поддержки компании "Газстройпром".
Твоя задача — вежливо сообщить пользователю, что готового ответа в базе знаний не нашлось, и предоставить контакты для связи со службой поддержки.

Не придумывай ответ. Не извиняйся.

Твой ответ должен содержать следующий текст без изменений:
"К сожалению, я не смог найти готовое решение в базе знаний. Вы можете обратиться в службу поддержки одним из следующих способов:
- По телефону: 8-800-555-35-35
- По электронной почте: support@gsp.ru"
"""

# Промпт для уверенного ответа на основе найденного контекста
CONFIDENT_PROMPT_TEMPLATE = """
Ты — вежливый и полезный ассистент службы поддержки компании "Газстройпром".
Твоя задача — помочь пользователю, ответив на его вопрос, основываясь на предоставленном контексте из базы знаний.
Если контекст содержит ссылку, обязательно включи её в ответ.

Контекст из базы знаний:
---
{context}
---

Вопрос пользователя: {user_prompt}

Твой ответ:
"""

# Промпт для ответа, найденного в каталоге ИТ-услуг
IT_CATALOG_PROMPT_TEMPLATE = """
Ты — вежливый и полезный ассистент службы поддержки компании "Газстройпром".
Твоя задача — помочь пользователю, ответив на его вопрос, основываясь на информации из каталога ИТ-услуг.

Обязательно начни свой ответ с фразы: "Согласно каталогу ИТ-услуг, для решения вашего вопроса предлагается следующее:".
После этого четко изложи решение из предоставленного контекста.
Если в контексте упоминается название услуги, укажи его.

Контекст из каталога ИТ-услуг:
---
{context}
---

Вопрос пользователя: {user_prompt}

Твой ответ:
"""

# Промпт для случая, когда релеватный контекст не найден
UNSURE_PROMPT_TEMPLATE = """
Ты — вежливый и полезный ассистент службы поддержки компании "Газстройпром".
Твоя задача — сообщить пользователю, что его запрос требует участия специалиста.

Не пытайся придумать ответ или извиниться.

Четко сообщи, что автоматическая обработка запроса невозможна и он будет передан в соответствующий отдел.
Предложи пользователю два варианта на выбор:
1. Оставить обращение через форму на внутреннем портале по ссылке: [ссылка на форму].
2. Дождаться ответа оператора (если доступна такая опция).

Вопрос пользователя для классификации: {user_prompt}

Твой ответ:
"""

# Промпт для сообщения о маршрутизации запроса
ROUTING_PROMPT_TEMPLATE = """
Ты — вежливый и полезный ассистент службы поддержки компании "Газстройпром".
Твоя задача — сообщить пользователю, что его запрос был проанализирован и направлен в ответственное подразделение.

Не придумывай ничего от себя.

Четко и кратко сообщи, что запрос направлен в отдел "{department}".

Вопрос пользователя, который был перенаправлен: {user_prompt}

Твой ответ:
"""


def get_gigachat_response(user_prompt, context_documents, is_confident, routing_info=None, found_in=None):
    """
    Отправляет запрос в GigaChat с учетом найденных документов
    и возвращает ответ модели.
    routing_info - это словарь с ключом "department", если запрос нужно маршрутизировать.
    found_in - флаг, указывающий, где был найден ответ ('it_catalog' или др.)
    """
    global chat
    # "Ленивая" инициализация: создаем объект только при первом вызове
    if chat is None:
        print("Инициализация GigaChat...")
        try:
            chat = GigaChat(credentials=GIGACHAT_CREDENTIALS, verify_ssl_certs=False)
            print("GigaChat успешно инициализирован.")
        except Exception as e:
            print(f"!!! Ошибка при инициализации GigaChat: {e}")
            return "Не удалось инициализировать модель GigaChat. Проверьте креды и сетевое подключение."

    if routing_info and routing_info.get("department"):
        # Логика для маршрутизации
        department = routing_info["department"]
        prompt = ROUTING_PROMPT_TEMPLATE.format(department=department, user_prompt=user_prompt)
        system_message = f"Ты — ассистент, который информирует пользователя о перенаправлении его запроса в отдел {department}."
    elif is_confident and context_documents:
        context = "\n\n---\n\n".join(context_documents)
        # Если найден только один документ, используем старые промпты
        if len(context_documents) == 1:
            if found_in == "it_catalog":
                prompt = IT_CATALOG_PROMPT_TEMPLATE.format(context=context, user_prompt=user_prompt)
                system_message = "Ты — ассистент, который находит решения в каталоге ИТ-услуг."
            else:
                prompt = CONFIDENT_PROMPT_TEMPLATE.format(context=context, user_prompt=user_prompt)
                system_message = "Ты — полезный ассистент, который помогает пользователям, отвечая на их вопросы на основе предоставленного контекста."
        else:
             # Если найдено несколько документов, используем новый промпт
            prompt = MULTIPLE_CONTEXT_PROMPT_TEMPLATE.format(context=context, user_prompt=user_prompt)
            system_message = "Ты — полезный ассистент, который анализирует несколько фрагментов контекста и предлагает пользователю выбор, если они из разных тем."

    else:
        # Используем новый промпт для контактов, если ответ не уверен
        prompt = CONTACT_SUPPORT_PROMPT_TEMPLATE
        system_message = "Ты — ассистент, который предоставляет контактную информацию службы поддержки."

    messages = [
        SystemMessage(content=system_message),
        HumanMessage(content=prompt),
    ]

    try:
        response = chat.invoke(messages)
        return response.content
    except Exception as e:
        print(f"Ошибка при обращении к GigaChat API: {e}")
        return "Извините, произошла ошибка при подключении к сервису GigaChat. Попробуйте позже."
