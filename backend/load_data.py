import os
import docx
import pandas as pd
import fitz  # PyMuPDF
from datetime import datetime  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º datetime
from .database import process_and_add_text

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç
script_dir = os.path.dirname(os.path.abspath(__file__))
# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –≤ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —ç—Ç–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞)
SOURCE_DIRECTORY = os.path.join(script_dir, "source_documents")


def load_from_docx(file_path):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ .docx, –ø—Ä–æ–ø—É—Å–∫–∞—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å.
    –≠—Ç–æ –¥–µ–ª–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –±–æ–ª–µ–µ —É—Å—Ç–æ–π—á–∏–≤–æ–π –∫ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–º –∏–ª–∏ —Å–ª–æ–∂–Ω—ã–º —Ñ–∞–π–ª–∞–º.
    """
    full_text = []
    try:
        doc = docx.Document(file_path)
        for para in doc.paragraphs:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
                if para.text.strip():
                    full_text.append(para.text)
            except Exception as para_e:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ, –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                print(f"  [!] –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ—á–∏—Ç–∞–µ–º—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –≤ —Ñ–∞–π–ª–µ {os.path.basename(file_path)}: {para_e}")
                continue
        
        if not full_text:
             print(f"  [!] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ {os.path.basename(file_path)}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.")
             return None

        return '\n'.join(full_text)
        
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–π –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ
        print(f"  [!] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ .docx —Ñ–∞–π–ª–∞ {os.path.basename(file_path)}: {e}")
        return None


def load_from_xlsx(file_path, category):
    """
    –ì–∏–±–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ XLSX. –°–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –æ–¥–Ω–∏–º –∏–ª–∏ –¥–≤—É–º—è —Å—Ç–æ–ª–±—Ü–∞–º–∏.
    –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç–æ–ª–±–µ—Ü —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É—Å–ª—É–≥–∏, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞.
    """
    try:
        df = pd.read_excel(file_path)
        
        # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        name_col = next((col for col in df.columns if '—É—Å–ª—É–≥' in col.lower() or '–Ω–∞–∑–≤–∞–Ω–∏–µ' in col.lower() or '—Ç–µ–º–∞' in col.lower()), df.columns[0])
        
        # 2. –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—Ç–æ–ª–±–µ—Ü —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º (–æ–Ω –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)
        content_col = next((col for col in df.columns if '–æ–ø–∏—Å–∞–Ω–∏–µ' in col.lower() or '—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ' in col.lower()), None)

        print(f"  -> –û–±—Ä–∞–±–æ—Ç–∫–∞ XLSX: '{os.path.basename(file_path)}'. –ö–æ–ª–æ–Ω–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º: '{name_col}'.", end=" ")
        if content_col:
            print(f"–ö–æ–ª–æ–Ω–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º: '{content_col}'.")
        else:
            print("–ö–æ–ª–æ–Ω–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            
        texts_with_metadata = []
        for _, row in df.iterrows():
            service_name = row[name_col]
            if pd.isna(service_name):
                continue

            # 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
            if content_col and pd.notna(row.get(content_col)):
                # –ï—Å—Ç—å –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
                text = f"–ò–¢-—É—Å–ª—É–≥–∞: {service_name}. –û–ø–∏—Å–∞–Ω–∏–µ: {row[content_col]}"
            else:
                # –ï—Å—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
                text = f"–í –∫–∞—Ç–∞–ª–æ–≥–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –ò–¢-—É—Å–ª—É–≥–∞: {service_name}"

            metadata = {
                "source": os.path.basename(file_path), 
                "category": category, 
                "doc_type": "knowledge",
                "load_date": datetime.now().isoformat(),
                "service_name": service_name
            }
            texts_with_metadata.append((text, metadata))
            
        return texts_with_metadata
    except Exception as e:
        print(f"!!! –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ XLSX —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return []


def load_from_pdf(file_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ .pdf."""
    try:
        doc = fitz.open(file_path)
        full_text = [page.get_text() for page in doc]
        doc.close()
        return '\n'.join(full_text)
    except Exception as e:
        print(f"  [!] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ .pdf —Ñ–∞–π–ª–∞ {os.path.basename(file_path)}: {e}")
        return None


def load_from_txt(file_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ .txt."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return f.read()
    except Exception as e:
        print(f"  [!] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ .txt —Ñ–∞–π–ª–∞ {os.path.basename(file_path)}: {e}")
        return None


def load_from_routing_xlsx(file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏."""
    try:
        df = pd.read_excel(file_path)
        
        # –ò—â–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–¥–µ–ª–∞
        request_col = next((col for col in df.columns if '–∑–∞–ø—Ä–æ—Å' in col.lower()), df.columns[0])
        department_col = next((col for col in df.columns if '–æ—Ç–¥–µ–ª' in col.lower() or '–¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç' in col.lower()), df.columns[1])

        print(f"  -> –û–±—Ä–∞–±–æ—Ç–∫–∞ XLSX –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏: '{os.path.basename(file_path)}'. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–æ–ª–±—Ü—ã: '{request_col}' –∏ '{department_col}'.")

        texts_with_metadata = []
        for _, row in df.iterrows():
            if pd.notna(row[request_col]) and pd.notna(row[department_col]):
                text = row[request_col]
                metadata = {
                    "source": os.path.basename(file_path),
                    "department": row[department_col],
                    "doc_type": "routing_example",
                    "load_date": datetime.now().isoformat() # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∑–∞–≥—Ä—É–∑–∫–∏
                }
                texts_with_metadata.append((text, metadata))
        return texts_with_metadata
    except Exception as e:
        print(f"!!! –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ XLSX —Ñ–∞–π–ª–∞ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ {file_path}: {e}")
        return []


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏,
    –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞, —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É.
    """
    print("="*50)
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É...")
    print(f"–ò—â–µ–º —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {SOURCE_DIRECTORY}")
    print("="*50)
    
    processed_files_count = 0
    
    if not os.path.isdir(SOURCE_DIRECTORY):
        print(f"‚ùå –û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{SOURCE_DIRECTORY}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ–µ –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –Ω–µ–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return

    # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –≤—Å–µ—Ö –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤
    for root, dirs, files in os.walk(SOURCE_DIRECTORY):
        # –ò—Å–∫–ª—é—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã Excel
        files = [f for f in files if not f.startswith('~')]
        
        for filename in files:
            file_path = os.path.join(root, filename)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
            relative_path = os.path.relpath(root, SOURCE_DIRECTORY)
            is_routing_file = relative_path.startswith('routing_examples')
            category = os.path.basename(root) if not is_routing_file else 'routing'

            print(f"[*] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {filename} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category})")

            # --- –ù–æ–≤–∞—è, –±–æ–ª–µ–µ —á–µ—Ç–∫–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ---

            # 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ XLSX —Ñ–∞–π–ª–æ–≤ (–∏ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏, –∏ –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π)
            if filename.lower().endswith(".xlsx"):
                records_to_process = []
                if is_routing_file:
                    records_to_process = load_from_routing_xlsx(file_path)
                else:
                    records_to_process = load_from_xlsx(file_path, category)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –∏–∑ —Ñ–∞–π–ª–∞
                for text, metadata in records_to_process:
                    process_and_add_text(text, metadata=metadata)
                
                if records_to_process:
                    processed_files_count += 1
                continue # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–∞–π–ª—É

            # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (DOCX, PDF, TXT)
            text = None
            if filename.lower().endswith(".docx"):
                text = load_from_docx(file_path)
            elif filename.lower().endswith(".pdf"):
                text = load_from_pdf(file_path)
            elif filename.lower().endswith(".txt"):
                text = load_from_txt(file_path)
            else:
                print(f"  [-] –ü—Ä–æ–ø—É—Å–∫ —Ñ–∞–π–ª–∞: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç.")
                continue

            # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Ñ–∞–π–ª–∞ –∫–∞–∫ –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç
            if text and text.strip():
                metadata = {
                    "source": filename,
                    "category": category,
                    "doc_type": "knowledge",
                    "load_date": datetime.now().isoformat()
                }
                if process_and_add_text(text, metadata=metadata):
                    processed_files_count += 1
            else:
                print(f"  [!] –§–∞–π–ª '{filename}' –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è.")
    
    print("="*50)
    if processed_files_count > 0:
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {processed_files_count} —Ñ–∞–π–ª–æ–≤.")
    else:
        print("üü° –ù–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.")
    print("–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")
    print("="*50)


if __name__ == "__main__":
    main()
